* Pipes are likely done best using:

  #'sb-posix:dup2
  #'sb-posix:pipe

  This snippet from
  https://www.gnu.org/software/guile/docs/guile-tut/tutorial.html
  shows how to use them simply in C:

/* Simple backend for a Logo like tortoise drawer.  */

#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>

static const int WIDTH = 10;
static const int HEIGHT = 10;

static FILE*
start_gnuplot ()
{
  FILE* output;
  int pipes[2];
  pid_t pid;

  pipe (pipes);
  pid = fork ();

  if (!pid)
    {
      dup2 (pipes[0], STDIN_FILENO);
      execlp ("gnuplot", NULL);
      return; /* Not reached.  */
    }

  output = fdopen (pipes[1], "w");

  fprintf (output, "set multiplot\n");
  fprintf (output, "set parametric\n");
  fprintf (output, "set xrange [-%d:%d]\n", WIDTH, WIDTH);
  fprintf (output, "set yrange [-%d:%d]\n", HEIGHT, HEIGHT);
  fprintf (output, "set size ratio -1\n");
  fprintf (output, "unset xtics\n");
  fprintf (output, "unset ytics\n");
  fflush (output);

  return output;
}

static FILE* global_output;

int
main (int argc, char* argv[])
{
  global_output = start_gnuplot ();

  return EXIT_SUCCESS;
}


* 2022-04-05: I've forked cl-plumbing to
  https://github.com/ghollisjr/cl-plumbing due to it lacking necessary
  stream methods and created a pull request.  The repo looks pretty
  stale, so if there's no word from the original maintainer then I'll
  request Quicklisp to point to my fork and continue maintaining the
  repo as needed.

  UPDATE: It turns out that cl-plumbing is extremely slow for these
  purposes as implemented.  See plumbing-test.lisp for benchmarking
  examples.  I have a feeling it's due to the (sleep ...) calls in the
  code since it hasn't been updated to use bordeaux-threads
  conditions.

* POSIX systems typically support pipes with file descriptors
  directly, so if it's possible to create some basic file descriptor
  streams in SBCL without any Lisp-side processing then this would be
  the most efficient way to implement the #'pipe function.

* I'm finding that the largest bottle neck for #'pipe and #'run seems
  to be SBCL's sb-ext:run-program being slow.  E.g., running "ls" 5
  times in BASH versus SBCL results in the following times:

  SBCL: 0.163 seconds
  BASH: 0.130 seconds
